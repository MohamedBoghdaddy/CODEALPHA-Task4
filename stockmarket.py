# -*- coding: utf-8 -*-
"""StockMarket.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MlXzG8ydINJODpLdphnUaFxXRwxdPkyb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import LSTM, Dense

# Load the dataset
data = pd.read_csv('NFLX.csv')

# Convert the date column to datetime format
data['Date'] = pd.to_datetime(data['Date'])

# Set the Date column as the index
data.set_index('Date', inplace=True)

# Define features and target
X = data.drop(columns=['Close'])  # Features
y = data['Close']  # Target

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Define the LSTM model
model_lstm = Sequential()
model_lstm.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model_lstm.add(LSTM(units=50, return_sequences=False))
model_lstm.add(Dense(units=1))

# Compile the model
model_lstm.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model_lstm.fit(X_train.values.reshape(-1, X_train.shape[1], 1), y_train.values, epochs=100, batch_size=32)

# Define the KNN model
model_knn = KNeighborsRegressor(n_neighbors=5)

# Train the model
model_knn.fit(X_train, y_train)

# Evaluate LSTM model
predictions_lstm = model_lstm.predict(X_test.values.reshape(-1, X_test.shape[1], 1))
mse_lstm = mean_squared_error(y_test, predictions_lstm)

# Evaluate KNN model
predictions_knn = model_knn.predict(X_test)
mse_knn = mean_squared_error(y_test, predictions_knn)

# Select the best performing model
best_model = min([(mse_lstm, 'LSTM'), (mse_knn, 'KNN')], key=lambda x: x[0])
print('Best Performing Model:', best_model[1])

# Number of future days to predict
future_days = 30

# Generate future dates
last_date = data.index[-1]
future_dates = pd.date_range(start=last_date, periods=future_days)

# Predict future stock prices using the LSTM model
future_predictions = model_lstm.predict(np.arange(len(data), len(data) + future_days).reshape(-1, 1))

# Plot actual stock prices
plt.figure(figsize=(12, 8))

# Plot actual stock prices
plt.plot(data.index, data['Close'], label='Actual Stock Prices', color='blue')

# Plot future stock price predictions
plt.plot(future_dates, future_predictions, label='Predicted Stock Prices (Next 30 Days)', color='red')

plt.title('Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.legend()
plt.grid(True)
plt.show()

